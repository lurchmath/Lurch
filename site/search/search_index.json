{
    "docs": [
        {
            "location": "/", 
            "text": "Lurch Documentation\n\n\nLurch is a mathematical word processor that checks the reasoning in users'\ndocuments, even mathematical proofs.\n\n\n\n\nCurrent version:\n \nDesktop app for Windows, Mac,\n   and Linux\n\n\nIn development:\n Web version, hosted and documented on this site\n\n\n\n\nUse the menus at the top to find what you're looking for.\n\n\nSource on GitHub:", 
            "title": "Home"
        }, 
        {
            "location": "/#lurch-documentation", 
            "text": "Lurch is a mathematical word processor that checks the reasoning in users'\ndocuments, even mathematical proofs.   Current version:   Desktop app for Windows, Mac,\n   and Linux  In development:  Web version, hosted and documented on this site   Use the menus at the top to find what you're looking for.  Source on GitHub:", 
            "title": " Lurch Documentation"
        }, 
        {
            "location": "/developer/", 
            "text": "Lurch Developer Docs\n\n\nA Development Platform\n\n\nRewriting the Lurch desktop app for the web involves building many\nsupporting tools that we call the \nLurch Web Platform.\n  Other developers\ncan build math-enabled web apps on the same platform, which improves the\nplatform and grows the community.\n\n\nWe've made the architecture simple and the learning curve small.  \nSee the\ndemo applications and tutorial to start developing.\n  We\nare currently using the platform to build Lurch on the web.\n\n\nArchitecture\n\n\nThe following table illustrates the software architecture.  Read it from the\nbottom up.\n\n\n\n  \n\n    \nApplications:\n\n    \nLurch Proof Checker\n\n    \nDemo apps\n\n    \nYour app\n\n  \n\n  \n\n    \nPlatform:\n\n    \nLurch Web Platform\n\n  \n\n  \n\n    \nFoundation:\n\n    \nTinyMCE\n        editor\n\n  \n\n\n\n\n\nGetting involved\n\n\nIf you're interested in helping out with development of this project (e.g.,\nupstream commits if you use the platform), contact\n\nNathan Carter\n.\n\n\nRepository details\n\n\nAll source code is in \nliterate\nCoffeeScript\n.  This makes it highly\nreadable, especially on GitHub, which renders it as MarkDown.  I have tried\nto be verbose in my comments, to help new readers.\n\n\nRepository overview:\n\n\n\n\n/\n (root folder)\n\n\npackage.json\n - used by \nnode.js\n to install\n  dependencies  (The app runs in a browser, not node.js.  This is just\n  for dev tools.)\n\n\ngulpfile.litcoffee\n define the build process, which uses\n  \ngulp\n\n\nmkdocs.yml\n defines how this documentation site is built, which uses\n  \nmkdocs\n\n\n\n\n\n\ndocs\n\n\nAll source files (Markdown) for this documentation site, which\n  \nmkdocs\n compiles into the \nsite\n folder.\n\n\n\n\n\n\nsite\n\n\nCompiled version of \ndoc-src/\n folder, for hosting on GitHub Pages;\n  you are seeing its contents here on this site\n\n\n\n\n\n\nsource\n\n\nSource code files used for building the platform.\n\n\nThe build process compiles these into files in the \nrelease\n folder.\n\n\n\n\n\n\nunit-tests\n\n\nUnit tests.\n\n\nTo run them, execute \ngulp test\n in the main folder, after you've set\n  it up as per \nthe Getting Started page\n.\n\n\n\n\n\n\nrelease\n\n\nDemo apps and the plugins that create them reside here.  You can try\n  them out live on the web; see\n  \nthe demo apps and tutorials page\n.\n\n\nThe \nLurch Proof Checker\n is being rewritten for the web and it will\n  live in this folder later.", 
            "title": "Introduction"
        }, 
        {
            "location": "/developer/#lurch-developer-docs", 
            "text": "", 
            "title": "Lurch Developer Docs"
        }, 
        {
            "location": "/developer/#a-development-platform", 
            "text": "Rewriting the Lurch desktop app for the web involves building many\nsupporting tools that we call the  Lurch Web Platform.   Other developers\ncan build math-enabled web apps on the same platform, which improves the\nplatform and grows the community.  We've made the architecture simple and the learning curve small.   See the\ndemo applications and tutorial to start developing.   We\nare currently using the platform to build Lurch on the web.", 
            "title": "A Development Platform"
        }, 
        {
            "location": "/developer/#architecture", 
            "text": "The following table illustrates the software architecture.  Read it from the\nbottom up.  \n   \n     Applications: \n     Lurch Proof Checker \n     Demo apps \n     Your app \n   \n   \n     Platform: \n     Lurch Web Platform \n   \n   \n     Foundation: \n     TinyMCE\n        editor", 
            "title": "Architecture"
        }, 
        {
            "location": "/developer/#getting-involved", 
            "text": "If you're interested in helping out with development of this project (e.g.,\nupstream commits if you use the platform), contact Nathan Carter .", 
            "title": "Getting involved"
        }, 
        {
            "location": "/developer/#repository-details", 
            "text": "All source code is in  literate\nCoffeeScript .  This makes it highly\nreadable, especially on GitHub, which renders it as MarkDown.  I have tried\nto be verbose in my comments, to help new readers.  Repository overview:   /  (root folder)  package.json  - used by  node.js  to install\n  dependencies  (The app runs in a browser, not node.js.  This is just\n  for dev tools.)  gulpfile.litcoffee  define the build process, which uses\n   gulp  mkdocs.yml  defines how this documentation site is built, which uses\n   mkdocs    docs  All source files (Markdown) for this documentation site, which\n   mkdocs  compiles into the  site  folder.    site  Compiled version of  doc-src/  folder, for hosting on GitHub Pages;\n  you are seeing its contents here on this site    source  Source code files used for building the platform.  The build process compiles these into files in the  release  folder.    unit-tests  Unit tests.  To run them, execute  gulp test  in the main folder, after you've set\n  it up as per  the Getting Started page .    release  Demo apps and the plugins that create them reside here.  You can try\n  them out live on the web; see\n   the demo apps and tutorials page .  The  Lurch Proof Checker  is being rewritten for the web and it will\n  live in this folder later.", 
            "title": "Repository details"
        }, 
        {
            "location": "/getting-started/", 
            "text": "Getting Started\n\n\nThis documentation is for developers who wish to learn about the \nLurch Web\nPlatform,\n and consider importing it into their own web projects.\n\n\nTry the demos online\n\n\nYou can \ntry out demo apps right now online\n.  To use the\nplatform, you can simply import the necessary files from a CDN.\n\n\nStop reading here!\n\n\nThta is, if you just want to use the platform in your own apps.  In that\ncase, check out the demo apps linked to above, or the\n\ndeveloper tutorial\n.\n\n\nOnly continue reading below if you want to \nhelp us develop the Lurch Web\nPlatform itself.\n  In that case, you need to clone and set up this\nrepository on your machine.  Here's how:\n\n\nSetting up a local repository\n\n\nInstall \nnode.js\n, which governs our building and testing\nprocess.  (The apps run in a browser.)\n\n\nThen execute these commands from a *nix prompt:\n * Get the repository: \ngit clone https://github.com/lurchmath/lurch.git\n\n * Enter that folder: \ncd lurch\n\n * Install node.js modules: \nnpm install\n\n\nTo compile the source, you'll want to run the build command\n\ngulp\n from inside the \nlurch\n folder. You may need to\ninstall gulp first; see its website.\n\n\nYou can also run \ngulp test\n to run the unit tests.\n\n\nRunning a local web server\n\n\nIf you build an app on the Lurch Web Platform, and are testing it on your\nlocal machine, , you need a web server (to avoid browser security concerns\nwith \nfile:///\n URLs).  You almost certainly have Python installed, so in\nthe folder you're building your app, do this.\n\n\n$ python -m SimpleHTTPServer 8000\n\n\n\n\nPoint your browser to \nlocalhost:8000/yourpage.html\n.", 
            "title": "Getting started"
        }, 
        {
            "location": "/getting-started/#getting-started", 
            "text": "This documentation is for developers who wish to learn about the  Lurch Web\nPlatform,  and consider importing it into their own web projects.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/getting-started/#try-the-demos-online", 
            "text": "You can  try out demo apps right now online .  To use the\nplatform, you can simply import the necessary files from a CDN.", 
            "title": "Try the demos online"
        }, 
        {
            "location": "/getting-started/#stop-reading-here", 
            "text": "Thta is, if you just want to use the platform in your own apps.  In that\ncase, check out the demo apps linked to above, or the developer tutorial .  Only continue reading below if you want to  help us develop the Lurch Web\nPlatform itself.   In that case, you need to clone and set up this\nrepository on your machine.  Here's how:", 
            "title": "Stop reading here!"
        }, 
        {
            "location": "/getting-started/#setting-up-a-local-repository", 
            "text": "Install  node.js , which governs our building and testing\nprocess.  (The apps run in a browser.)  Then execute these commands from a *nix prompt:\n * Get the repository:  git clone https://github.com/lurchmath/lurch.git \n * Enter that folder:  cd lurch \n * Install node.js modules:  npm install  To compile the source, you'll want to run the build command gulp  from inside the  lurch  folder. You may need to\ninstall gulp first; see its website.  You can also run  gulp test  to run the unit tests.", 
            "title": "Setting up a local repository"
        }, 
        {
            "location": "/getting-started/#running-a-local-web-server", 
            "text": "If you build an app on the Lurch Web Platform, and are testing it on your\nlocal machine, , you need a web server (to avoid browser security concerns\nwith  file:///  URLs).  You almost certainly have Python installed, so in\nthe folder you're building your app, do this.  $ python -m SimpleHTTPServer 8000  Point your browser to  localhost:8000/yourpage.html .", 
            "title": "Running a local web server"
        }, 
        {
            "location": "/dev-tutorial/", 
            "text": "Demo Apps and App Developer Tutorial\n\n\nIntroduction\n\n\nWhat can I build with this platform?\n\n\nThe webLurch \narchitecture\n has three\ntiers:  The top tier are the applications, built on the middle tier, which\nis the \nLurch Web Platform\n, which is built on the bottom tier, the WYSIWYG\neditor \nTinyMCE\n.\n\n\n\n\nTinyMCE provides:\n\n\nWYSIWYG editing of HTML content\n     \n\n\nExtendability through custom toolbars, menus, dialogs, etc.\n\n\nThe \nLurch Web Platform\n builds on that foundation, and provides:\n\n\nIn-cloud and in-browser storage\n\n     \n\n\nA WYSIWYG math editing widget, \nimported from\n     here\n\n     \n\n\nGroups\n, the most important contribution of the \nLurch Web\n     Platform\n, \nexplained below\n.\n\n\nFacilities for computing with groups, such as\n     \na background computation/parallelization toolkit\n\n\n\n\nWhat are groups?\n\n\nThe crux of the user interface for the desktop version of Lurch is the\nability for the user to mark portions of a document as \nmeaningful\n with\ngroups.\n\n\nGroups are represented on screen as \"bubbles,\" as in the images below.  Thus\nthe terms \"group\" and \"bubble\" are sometimes used interchangeably, but\ntechnically \"group\" is the term for the object in memory, and \"bubble\" its\nrepresentation on screen.\n\n\nExamples:\n\n\n\n\nOne demo app lets users wrap bubbles around mathematical expressions to\n   tell Lurch to pay attention to the expressions' meaning.  Lurch puts a\n   tag above the bubble to let the user see what the content means to Lurch.\n   \n\n\nAnother demo app lets users put bubbles around text to give it\n   application-specific meaning.  The following screenshot is from an\n   application for authoring OpenMath Content Dictionaries.\n   \n\n\nComplex nested group hierarchies are possible and very useful.  Desktop\n   Lurch uses them constantly:\n   \n\n\n\n\nRead about about the importance of this user interface\nparadigm in a blog post about the desktop version of\nLurch.\n\n\nExample Applications\n\n\nThere are six example applications built on this platform, each covered on\nthe \nexample applications page\n.\n\n\nTutorial\n\n\nBuild a \nLurch Web Application\n as follows.\n\n\n\n\nPhase 1:\n Create a web page that imports the \nLurch Web Platform\n.\n\n\nPhase 2:\n Write code that defines a set of group types.\n\n\nPhase 3:\n Optionally add new/custom behaviors to those types.\n\n\n\n\nThis section gives step-by-step instructions for creating your own \nLurch\nWeb Application.\n  By the end of this section, you will have completed\nPhases 1 and 2 on the list, and will know where to go to explore Phase 3.\n\n\nPhase 1: A first app (and a very simple one)\n\n\n\n\nThe easiest way to begin is with a working app.  Get a copy of the\n    \nsimple example app\n as\n    follows:\n\n\nVisit that page and use the green button to download a .zip of that\n  repository to your computer.  Extract its contents.\n\n\nRun \nnpm install\n in that folder, then run \ngulp\n and be sure that it\n  can rebuild the app successfully.\n\n\nStart up a simple web server in that folder to serve yourself that app\n  so that we can be sure it's working:\n  \npython -m SimpleHTTPServer 8000\n\n\nVisit \nhttp://localhost:8000\n to see the simple example app running on\n  your machine.\n\n\n\n\n\n\nEdit \nlwp-example-simple.litcoffee\n.\n\n\nThe file begins with a lot of documentation, and then the first line\n  of code is \nsetAppName 'ExampleApp'\n.  Change the contents of the\n  string to your app's name.\n\n\nRebuild using \ngulp\n and revisit the page to ensure that the app\n  name in the browser's tab has changed to your app's name.\n\n\n\n\n\n\n\n\nYou've created a (very simple) app!  And you know how to change your app's\ncode, rebuild, and visit your updated app.  So what kinds of code changes\nare possible?  Let's see.\n\n\nPhase 2: Changing or adding group types\n\n\nThe individual bubbles you can add to the document in the example app are\nthe visual representation of what, under the hood, are called \"groups.\"\nEach app has a different set of group types that the user may insert in the\ndocument, depending on the needs of the application.  Examples:\n\n\n\n\nIn the simple app you have, there is only one group type, and it does\n   very litte:  It reports the size of its contents and dumps some\n   debugging information to the browser console.\n\n\nThe complex demo app\n\n   defines two group types, one for wrapping and evaluating expressions of\n   arithmetic and another for wrapping and doing simple computations on\n   words.\n\n\nThe math demo app\n has\n   nly one group type, for parsing and evaluating mathematical expressions.\n\n\nThe OpenMath Content Dictionary Editor\n\n   has only one group type, but it can have any of over a dozen different\n   purposes, editable using the context menu on each individual group.\n\n\n\n\nIf we look at the code in your app that defines group types, stripping away\nall the documentation, it looks like the following.\n\n\nwindow.groupTypes = [\n    name : 'reporter'\n    text : 'Simple Event Reporter'\n    imageHTML : '[ ]'\n    openImageHTML : '['\n    closeImageHTML : ']'\n    tagContents : ( group ) -\n\n        \n#{group.contentAsText()?.length} characters\n\n    contentsChanged : ( group, firstTime ) -\n\n        console.log 'This group just changed:', group.contentAsText()\n]\n\n\n\n\nAll of this is fully documented \nin the original\nfile\n, so I do\nnot repeat here what any of it means.  But note that this is simply the\nassignment to a global variable of an array of group type data.  You could\nextend it to add another group type as follows.\n\n\nwindow.groupTypes = [\n    #\n    # This code is the same as before:\n    #\n    name : 'reporter'\n    text : 'Simple Event Reporter'\n    imageHTML : '[ ]'\n    openImageHTML : '['\n    closeImageHTML : ']'\n    tagContents : ( group ) -\n\n        \n#{group.contentAsText()?.length} characters\n\n    contentsChanged : ( group, firstTime ) -\n\n        console.log 'This group just changed:', group.contentAsText()\n    #\n    # Here begins the new code:\n    #\n,\n    name : 'myNewGroupType'\n    text : 'My New Group Type'\n    imageHTML : '{}'\n    openImageHTML : '{'\n    closeImageHTML : '}'\n    tagContents : ( group ) -\n 'every tag has this content'\n    # no event handler for changes to group contents\n]\n\n\n\n\nRebuilding your app and reloading it in the browser should then let you\ninsert either of the two kinds of groups.  Each type should have its own\nbutton on the toolbar.\n\n\nBy simply extending the list above, you can define any set of group types\nyou see fit in your application.  Note that the open and close HTML can be\narbitrary HTML, including (small) images, font colors, and styles.\n\n\nThe only question that remains is how to make your groups do something\nuseful.\n\n\nPhase 3: Adding interactivity to your groups\n\n\nWhat else can groups do?  Here are many examples, each with a link to where\nyou can read more information and see example code.\n\n\nReport information about the group on the bubble's tag\n\n\n\n\nEvery example app you've seen so far does this.  Simply search the\n   source code repository for the \ntagContents\n function and look at the\n   variety of implementations.\n\n\nIn computing the contents of the tag, you will want to be able to query\n   information about your group, such as its text content, or whether it\n   has any groups inside of it.  The API for a Group object is \ndocumented\n   in the source code for the Groups\n   Plugin\n.\n\n\n\n\nCustomize a group's color\n\n\n\n\nInclude among the key-value pairs in your group type definition a pair\n   like \ncolor : '#aacc00'\n, or whatever HTML color you choose.\n\n\n\n\nStore and retrieve custom data in a Group object\n\n\n\n\nIn the API linked to immediately above, see the \nset\n, \nget\n, and\n   \nclear\n functions in the \nGroup\n class.  These store arbitrary JSON\n   data under string keys in a group.\n\n\nIt is very common to do a computation and store its result in an\n   attribute of the group, the read that later when computing the contents\n   of the group's tag, thus giving the user feedback on the results of\n   some background process.\n\n\n\n\nFind what groups are in the document\n\n\n\n\nFor a complete answer, see the API for the \nGroups\n class (different\n   from the \nGroup\n class!) in \nthe Groups\n   Plugin\n.\n   Since that file is large, I give highlights here.\n\n\nAccess the one, global \nGroups\n object using the code\n   \ntinymce.activeEditor.Groups\n.  I call this object \nGroups\n hereafter.\n\n\nGet the array of all group IDs in your document (in the order their\n   open boundaries appear in the document) with \nGroups.ids()\n.\n\n\nGet a group object from its ID by indexing \nGroups\n as if it were an\n   array, as in \nGroups[someID]\n or \nGroups[0]\n.\n\n\nFor any group \nG\n, get the group containing it with \nG.parent\n, which\n   will be null if the group is top-level in the document, or if it was\n   just created in the document (instants ago) and the editor has\n   therefore not yet had a chance to re-scan and assign parent/child\n   relationships.\n\n\nFor any group \nG\n, get an ordered array of the groups it (immediately)\n   contains with \nG.children\n.  (Same caveat about just-created groups\n   applies here.)\n\n\n\n\nPushing complex computations into the background\n\n\n\n\nThe \nLurch Web Platform\n provides functionality for moving arbitrary\n   computations into one or more background threads, with parallelization\n   managed efficiently for you.  This lengthy topic is covered in two\n   files:\n\n\nThe \"complex example\" demo app\n\n   pushes some computations into the background, and you can follow its\n   example code.\n\n\nThe background module\n\n   documents the full API that's being leveraged by that demo app.\n\n\n\n\nExtending the menus that appear when users right-click a group or click\nits bubble tag\n\n\n\n\nExtending a group's context menu is done by providing a\n   \ncontextMenuItems\n function in the group type definition.  For an\n   example, look for that term in \nthe source code for the complex example\n   demo app\n.\n\n\nExtending a group's tag menu is done by providing a \ntagMenuItems\n\n   function that behaves exactly the same way, but may choose to return a\n   different list of menu items.\n\n\n\n\nAdding new buttons to the editor toolbar\n\n\n\n\nThis is done by assigning to the global object\n   \nwindow.groupToolbarButtons\n.\n\n\nSee an example\n   here.\n\n\n\n\nAdding new menu items to the editor's menus\n\n\n\n\nThis is done by assigning to the global object\n   \nwindow.groupMenuItems\n.\n\n\nThere is not an example of this at the moment, but it functions very\n   similar to the previous bullet point, about toolbar buttons.  The\n   implementation appears in\n   \nthe main setup code\n.\n\n\n\n\nShowing dialog boxes\n\n\n\n\nTinyMCE provides a few ways to show dialog boxes containing plain\n   text\n.\n\n\nIf your dialog box must contain more than just plain text, see\n   \nthe Dialogs plugin\n.\n\n\n\n\nAdding decorations to group boundaries\n\n\n\n\nIt is common to give feedback to the user about the content of a group\n   in a more obvious way than the bubble tag (which is only visible when\n   the user's cursor is in the group).  For instance, if there is an\n   error in what the user has entered in a group, you might want to\n   flag it in an obvious way, as the \n\n   does in the following example from\n   \nthe OpenMath Content Dictionary Editor demo\n   app\n.\n   \n\n   This is a special case of \"decorating\" a group.  To add decorations to\n   a group \nG\n, you have the following API.\n\n\nG.set 'openDecoration', 'any valid HTML here'\n - sets the decoration\n   that will appear to the left of its open boundary marker (not used in\n   the image above)\n\n\nG.set 'closeDecoration', 'any valid HTML here'\n - same as the previous\n   but for after the close boundary marker (as in the image above)\n\n\nG.clear 'openDecoration'\n and \nG.clear 'closeDecoration'\n behave as\n   expected\n\n\nNote that there are many useful Unicode characters for visually giving\n   understandable feedback concisely.  Consider the following, each of\n   which can be made more informative by wrapping it in\n   \nfont color=\"red\"\n...\n/font\n, as in the image above,\n   or some other color suiting your application.\n\n\nX's\n\n\n#10006; is \n\n\n#10007; is \n\n\n#10007; is \n\n\n\n\n\n\nChecks\n\n\n#10003; is \n\n\n#10004; is \n\n\n\n\n\n\nStars\n\n\n#10029; is \n\n\n#10038; is \n\n\n#10039; is \n\n\n#10040; is \n\n\n#10041; is \n\n\n\n\n\n\nNumbers\n\n\n#10122; is \n\n\n... in order through ...\n\n\n#10131; is \n\n\n\n\n\n\n\n\nOther functionality\n\n\nIn this section I document other configuration possibilities beyond those\nmentioned above, things that didn't fit neatly into the above categories.\n\n\nTo run any code after the editor has been set up, assign a function to the\nglobal variable \nwindow.afterEditorReady\n.  Your function should accept a\nsingle parameter, \neditor\n, which will be the editor object that was just\ninitialized.  Your function will be called at the end of the TinyMCE editor\n\"init\" event.\n\n\n\n\nThis tutorial was written by \nNathan Carter\n.\nFeel free to contact me with questions.  I would love to know how we can\nhelp get you started coding on the \nLurch Web Platform\n.", 
            "title": "Tutorial"
        }, 
        {
            "location": "/dev-tutorial/#demo-apps-and-app-developer-tutorial", 
            "text": "", 
            "title": "Demo Apps and App Developer Tutorial"
        }, 
        {
            "location": "/dev-tutorial/#introduction", 
            "text": "", 
            "title": "Introduction"
        }, 
        {
            "location": "/dev-tutorial/#what-can-i-build-with-this-platform", 
            "text": "The webLurch  architecture  has three\ntiers:  The top tier are the applications, built on the middle tier, which\nis the  Lurch Web Platform , which is built on the bottom tier, the WYSIWYG\neditor  TinyMCE .   TinyMCE provides:  WYSIWYG editing of HTML content\n       Extendability through custom toolbars, menus, dialogs, etc.  The  Lurch Web Platform  builds on that foundation, and provides:  In-cloud and in-browser storage \n       A WYSIWYG math editing widget,  imported from\n     here \n       Groups , the most important contribution of the  Lurch Web\n     Platform ,  explained below .  Facilities for computing with groups, such as\n      a background computation/parallelization toolkit", 
            "title": "What can I build with this platform?"
        }, 
        {
            "location": "/dev-tutorial/#what-are-groups", 
            "text": "The crux of the user interface for the desktop version of Lurch is the\nability for the user to mark portions of a document as  meaningful  with\ngroups.  Groups are represented on screen as \"bubbles,\" as in the images below.  Thus\nthe terms \"group\" and \"bubble\" are sometimes used interchangeably, but\ntechnically \"group\" is the term for the object in memory, and \"bubble\" its\nrepresentation on screen.  Examples:   One demo app lets users wrap bubbles around mathematical expressions to\n   tell Lurch to pay attention to the expressions' meaning.  Lurch puts a\n   tag above the bubble to let the user see what the content means to Lurch.\n     Another demo app lets users put bubbles around text to give it\n   application-specific meaning.  The following screenshot is from an\n   application for authoring OpenMath Content Dictionaries.\n     Complex nested group hierarchies are possible and very useful.  Desktop\n   Lurch uses them constantly:\n      Read about about the importance of this user interface\nparadigm in a blog post about the desktop version of\nLurch.", 
            "title": "What are groups?"
        }, 
        {
            "location": "/dev-tutorial/#example-applications", 
            "text": "There are six example applications built on this platform, each covered on\nthe  example applications page .", 
            "title": "Example Applications"
        }, 
        {
            "location": "/dev-tutorial/#tutorial", 
            "text": "Build a  Lurch Web Application  as follows.   Phase 1:  Create a web page that imports the  Lurch Web Platform .  Phase 2:  Write code that defines a set of group types.  Phase 3:  Optionally add new/custom behaviors to those types.   This section gives step-by-step instructions for creating your own  Lurch\nWeb Application.   By the end of this section, you will have completed\nPhases 1 and 2 on the list, and will know where to go to explore Phase 3.", 
            "title": "Tutorial"
        }, 
        {
            "location": "/dev-tutorial/#phase-1-a-first-app-and-a-very-simple-one", 
            "text": "The easiest way to begin is with a working app.  Get a copy of the\n     simple example app  as\n    follows:  Visit that page and use the green button to download a .zip of that\n  repository to your computer.  Extract its contents.  Run  npm install  in that folder, then run  gulp  and be sure that it\n  can rebuild the app successfully.  Start up a simple web server in that folder to serve yourself that app\n  so that we can be sure it's working:\n   python -m SimpleHTTPServer 8000  Visit  http://localhost:8000  to see the simple example app running on\n  your machine.    Edit  lwp-example-simple.litcoffee .  The file begins with a lot of documentation, and then the first line\n  of code is  setAppName 'ExampleApp' .  Change the contents of the\n  string to your app's name.  Rebuild using  gulp  and revisit the page to ensure that the app\n  name in the browser's tab has changed to your app's name.     You've created a (very simple) app!  And you know how to change your app's\ncode, rebuild, and visit your updated app.  So what kinds of code changes\nare possible?  Let's see.", 
            "title": "Phase 1: A first app (and a very simple one)"
        }, 
        {
            "location": "/dev-tutorial/#phase-2-changing-or-adding-group-types", 
            "text": "The individual bubbles you can add to the document in the example app are\nthe visual representation of what, under the hood, are called \"groups.\"\nEach app has a different set of group types that the user may insert in the\ndocument, depending on the needs of the application.  Examples:   In the simple app you have, there is only one group type, and it does\n   very litte:  It reports the size of its contents and dumps some\n   debugging information to the browser console.  The complex demo app \n   defines two group types, one for wrapping and evaluating expressions of\n   arithmetic and another for wrapping and doing simple computations on\n   words.  The math demo app  has\n   nly one group type, for parsing and evaluating mathematical expressions.  The OpenMath Content Dictionary Editor \n   has only one group type, but it can have any of over a dozen different\n   purposes, editable using the context menu on each individual group.   If we look at the code in your app that defines group types, stripping away\nall the documentation, it looks like the following.  window.groupTypes = [\n    name : 'reporter'\n    text : 'Simple Event Reporter'\n    imageHTML : '[ ]'\n    openImageHTML : '['\n    closeImageHTML : ']'\n    tagContents : ( group ) - \n         #{group.contentAsText()?.length} characters \n    contentsChanged : ( group, firstTime ) - \n        console.log 'This group just changed:', group.contentAsText()\n]  All of this is fully documented  in the original\nfile , so I do\nnot repeat here what any of it means.  But note that this is simply the\nassignment to a global variable of an array of group type data.  You could\nextend it to add another group type as follows.  window.groupTypes = [\n    #\n    # This code is the same as before:\n    #\n    name : 'reporter'\n    text : 'Simple Event Reporter'\n    imageHTML : '[ ]'\n    openImageHTML : '['\n    closeImageHTML : ']'\n    tagContents : ( group ) - \n         #{group.contentAsText()?.length} characters \n    contentsChanged : ( group, firstTime ) - \n        console.log 'This group just changed:', group.contentAsText()\n    #\n    # Here begins the new code:\n    #\n,\n    name : 'myNewGroupType'\n    text : 'My New Group Type'\n    imageHTML : '{}'\n    openImageHTML : '{'\n    closeImageHTML : '}'\n    tagContents : ( group ) -  'every tag has this content'\n    # no event handler for changes to group contents\n]  Rebuilding your app and reloading it in the browser should then let you\ninsert either of the two kinds of groups.  Each type should have its own\nbutton on the toolbar.  By simply extending the list above, you can define any set of group types\nyou see fit in your application.  Note that the open and close HTML can be\narbitrary HTML, including (small) images, font colors, and styles.  The only question that remains is how to make your groups do something\nuseful.", 
            "title": "Phase 2: Changing or adding group types"
        }, 
        {
            "location": "/dev-tutorial/#phase-3-adding-interactivity-to-your-groups", 
            "text": "What else can groups do?  Here are many examples, each with a link to where\nyou can read more information and see example code.  Report information about the group on the bubble's tag   Every example app you've seen so far does this.  Simply search the\n   source code repository for the  tagContents  function and look at the\n   variety of implementations.  In computing the contents of the tag, you will want to be able to query\n   information about your group, such as its text content, or whether it\n   has any groups inside of it.  The API for a Group object is  documented\n   in the source code for the Groups\n   Plugin .   Customize a group's color   Include among the key-value pairs in your group type definition a pair\n   like  color : '#aacc00' , or whatever HTML color you choose.   Store and retrieve custom data in a Group object   In the API linked to immediately above, see the  set ,  get , and\n    clear  functions in the  Group  class.  These store arbitrary JSON\n   data under string keys in a group.  It is very common to do a computation and store its result in an\n   attribute of the group, the read that later when computing the contents\n   of the group's tag, thus giving the user feedback on the results of\n   some background process.   Find what groups are in the document   For a complete answer, see the API for the  Groups  class (different\n   from the  Group  class!) in  the Groups\n   Plugin .\n   Since that file is large, I give highlights here.  Access the one, global  Groups  object using the code\n    tinymce.activeEditor.Groups .  I call this object  Groups  hereafter.  Get the array of all group IDs in your document (in the order their\n   open boundaries appear in the document) with  Groups.ids() .  Get a group object from its ID by indexing  Groups  as if it were an\n   array, as in  Groups[someID]  or  Groups[0] .  For any group  G , get the group containing it with  G.parent , which\n   will be null if the group is top-level in the document, or if it was\n   just created in the document (instants ago) and the editor has\n   therefore not yet had a chance to re-scan and assign parent/child\n   relationships.  For any group  G , get an ordered array of the groups it (immediately)\n   contains with  G.children .  (Same caveat about just-created groups\n   applies here.)   Pushing complex computations into the background   The  Lurch Web Platform  provides functionality for moving arbitrary\n   computations into one or more background threads, with parallelization\n   managed efficiently for you.  This lengthy topic is covered in two\n   files:  The \"complex example\" demo app \n   pushes some computations into the background, and you can follow its\n   example code.  The background module \n   documents the full API that's being leveraged by that demo app.   Extending the menus that appear when users right-click a group or click\nits bubble tag   Extending a group's context menu is done by providing a\n    contextMenuItems  function in the group type definition.  For an\n   example, look for that term in  the source code for the complex example\n   demo app .  Extending a group's tag menu is done by providing a  tagMenuItems \n   function that behaves exactly the same way, but may choose to return a\n   different list of menu items.   Adding new buttons to the editor toolbar   This is done by assigning to the global object\n    window.groupToolbarButtons .  See an example\n   here.   Adding new menu items to the editor's menus   This is done by assigning to the global object\n    window.groupMenuItems .  There is not an example of this at the moment, but it functions very\n   similar to the previous bullet point, about toolbar buttons.  The\n   implementation appears in\n    the main setup code .   Showing dialog boxes   TinyMCE provides a few ways to show dialog boxes containing plain\n   text .  If your dialog box must contain more than just plain text, see\n    the Dialogs plugin .   Adding decorations to group boundaries   It is common to give feedback to the user about the content of a group\n   in a more obvious way than the bubble tag (which is only visible when\n   the user's cursor is in the group).  For instance, if there is an\n   error in what the user has entered in a group, you might want to\n   flag it in an obvious way, as the  \n   does in the following example from\n    the OpenMath Content Dictionary Editor demo\n   app .\n    \n   This is a special case of \"decorating\" a group.  To add decorations to\n   a group  G , you have the following API.  G.set 'openDecoration', 'any valid HTML here'  - sets the decoration\n   that will appear to the left of its open boundary marker (not used in\n   the image above)  G.set 'closeDecoration', 'any valid HTML here'  - same as the previous\n   but for after the close boundary marker (as in the image above)  G.clear 'openDecoration'  and  G.clear 'closeDecoration'  behave as\n   expected  Note that there are many useful Unicode characters for visually giving\n   understandable feedback concisely.  Consider the following, each of\n   which can be made more informative by wrapping it in\n    font color=\"red\" ... /font , as in the image above,\n   or some other color suiting your application.  X's  #10006; is   #10007; is   #10007; is     Checks  #10003; is   #10004; is     Stars  #10029; is   #10038; is   #10039; is   #10040; is   #10041; is     Numbers  #10122; is   ... in order through ...  #10131; is", 
            "title": "Phase 3: Adding interactivity to your groups"
        }, 
        {
            "location": "/dev-tutorial/#other-functionality", 
            "text": "In this section I document other configuration possibilities beyond those\nmentioned above, things that didn't fit neatly into the above categories.  To run any code after the editor has been set up, assign a function to the\nglobal variable  window.afterEditorReady .  Your function should accept a\nsingle parameter,  editor , which will be the editor object that was just\ninitialized.  Your function will be called at the end of the TinyMCE editor\n\"init\" event.   This tutorial was written by  Nathan Carter .\nFeel free to contact me with questions.  I would love to know how we can\nhelp get you started coding on the  Lurch Web Platform .", 
            "title": "Other functionality"
        }, 
        {
            "location": "/plan/", 
            "text": "Project Plan\n\n\nThis document aims to be a complete plan for what needs to be done on this\nproject, readable by developers.  It can therefore be viewed as a to-do list\nin chronological order, the first items being those that should be done\nnext, and the later items those that must come after.  Necessarily, the\nlater items are more vague than the earlier ones.\n\n\nNote also that there are some \nknown bugs and planned enhancements\n not listed in this file, because they are not part\nof the linear progression of the project.  They can be addressed whenever it\nbecomes convenient or useful; this document lists things in a more-or-less\nrequired order of completion.\n\n\nJSON editor demo app\n\n\nThis is low priority, but another demo app you could create would be a JSON\neditor.  It would be a lot like the OMCD editor, except produce JSON instead\nof XML.  It would also have multiple types of atomic data, and use\nconnections for key-value pairs in mappings.\n\n\nEnabling and disabling features\n\n\nImplement the following system satisfying the following requirements, for\nallowing users to enable/disable certain app features on a per-document\nbasis.  The first optional feature is pattern-based rules, so this is not\nnecessary to implement until then.\n\n\n\n\nThe app register a list of features (probably a short phrase naming each,\n   plus a one-to-two-sentence description of it, plus a default value for\n   enabled/disabled).\n\n\nThe app can then query, at any time, the enabled/disabled status of any\n   feature in the currently open document.  At first, such a function should\n   just return the default value.\n\n\nThe document settings dialog will then have a section for application\n   features, with checkboxes for enabling/disabling all registered features.\n   Such changes will be written to document metadata.\n\n\nThen you can upgrade the enable/disable query function to check the\n   document metadata first, and return the default value only if there is no\n   information in the document metadata about the feature.\n\n\nLook through the OverLeaf specification for places where various features\n   are mentioned as optional, and if any are currently implemented in the\n   app, add code that ignores/disables them in any document for which the\n   query function returns \"disabled\" for that feature.\n\n\nEnsure that there is an event that fires when document settings are\n   changed; if there is not one, create one.\n\n\nAt any point where a change in settings will require some kind of\n   re-processing (e.g., the list of supported validation features was\n   changed) be sure that a handler for the event exists and works.\n\n\n\n\nParsing test\n\n\nRewrite the following section to more accurately reflect Section 24 of the\nspecification, then implement it as a module attached to the main Lurch\napplication, a module that can easily be disabled if we need to redesign it.\n\n\n\n\nAdd two new attribute types to the context menu for attribute expressions\n   in the document: \"notation,\" \"type,\" and \"meaning.\"\n\n\nAdd a new validation category for anything that has a \"notation\",\n   \"meaning,\" or \"type\" arrow going in or out.  Call it notation validation.\n\n\nStart notation validation by verifying that the expression being\n   validated fits all of the following criteria.  If it does not, mark it\n   invalid.\n\n\nIf you output type arrows, you output no other kind of arrows.\n  Reason: A type cannot also be a notation or meaning.\n\n\nIf you output type arrows, you take no arrows in.\n  Reason: A type cannot be assigned any notation, type, or meaning.\n\n\nIf you output a notation arrow, you output at most one.\n  Reason: We currently require notation to be in exactly one category.\n\n\nIf you output a meaning arrow, you output at most one.\n  Reason: Notation must be unambiguous.\n\n\nIf you output a meaning, you do not take in a type.\n  Reason: Only patterns can have meaning, and thus they are non-atomic\n  expressions.  Types are only for atomic expressions.\n\n\nIf you take in a meaning, you take in no notation arrows.\n  Reason: Meanings cannot also be notational categories.\n\n\nIf you take in a meaning, you take in no type arrows.\n  Reason: Meanings are not notations, and thus can't have notational\n  types.\n\n\nIf you take in a notation, you take in no type arrows.\n  Reason: Notational categories aren't expressions, to be assigned\n  types.\n\n\nIf you take in a type, you take in no other kind of arrows.\n  Reason: This means you're the notation for an atomic type, and cannot\n  be assigned a meaning, nor treated as a notational category.\n\n\nIf you take in a meaning, you output no arrows.\n  Reason: Meanings are supposed to stand alone, not be a piece of\n  something else.\n\n\nIf you take in a notation, you output no type arrow.\n  Reason: Notational categories can't also be types.\n\n\nIf you take in a type arrow, you output neither type nor meaning\n  arrows.\n  Reason: Only atomic notations have types, and they canont be types or\n  meanings.\n\n\n\n\n\n\nCreate a function that computes, for any given expression, whether it is\n   the \"core\" of a notation definition.  For a non-pattern, this is the\n   target of the type arrow.  For a pattern, this is the source of the\n   meaning arrow.\n\n\nExtend that function to return false if any expression in the connected\n   component of the attribution graph is not valid.\n\n\nCreate a function that, for cores of notation definitions, computes a\n   JSON representation of how to modify a parser with that new rule.  Here's\n   how:\n\n\nFor a structure of the form \n[A]\n--notation--[B]\n--type--[C]\n:\n\n\nIf C is \"built-in\" then try to read B as integer/real/letter/etc.,\n  and use a built-in regular expression to create an atomic parsing\n  rule in category A.\n\n\nIf C is \"regular expression\" or \"regexp\" or \"re\" then create an\n  atomic parsing rule using B's content as a regular expression in\n  category A.\n\n\nIf C is \"symbol\" then create an atomic parsing rule using B as\n  static (not a regular expression) in category A.\n\n\n\n\n\n\nFor a structure of the form \n[A]\n--notation--[B]\n:\n   Create the parsing rule that B is a subcategory of A.\n\n\nFor a structure of the form \n[A]\n--notation--[B]\n with n other\n   structures of the form \n[A1]--type--\n[variables]--\n[B]\n, and\n   optionally a connection \n[B]--meaning--\n[M]\n:\n   Create, in category A, a grammar rule that follows the pattern in B,\n   but with each variable replaced by its type (some Ai).  As the\n   head of the OpenMath expression that will be generated, use the\n   \nOM.encodeAsIdentifier\n version of the first label on the definition\n   core.  If there is no label, encode the definition itself (with the\n   types, not the variable names).\n   Also record in the same JSON data all labels of the core, and the\n   complete form of the meaning.  That complete form will include the\n   notational definition as an attribute, which should be removed.\n\n\n\n\n\n\nCreate a function that applies any such JSON record of a command to a\n   parser object, thus modifying that parser appropriately.\n\n\nExtend the \ncontentsChanged\n handler for expressions so that, if they are\n   part of a notation/type/meaning component in the attribution graph, find\n   their core and call this function on it, saving the result internally,\n   much like validation does.\n\n\nWhenever any such parsing JSON data is recomputed and stored, loop\n   through all later expressions in the document, doing the following.\n\n\nBefore the loop, create an empty parser P.\n\n\nUpon encountering an expression containing notation JSON data, apply to\n     it the function that extends P with that data.\n\n\nUpon encountering an expression with attribute test set to true, run P\n     on its contents and store the resulting structure as a group attribute\n     in the expression.  (If the expression doesn't parse, this may be\n     null.)\n\n\nCreate three functions for storing meanings in parsing test expressions:\n\n\nThe first reads two attributes, one storing the computed meaning and\n  one storing the official meaning (which, for now, no expression yet\n  has, but that's coming soon).  It then writes into the expression the\n  following data.\n\n\nIf there is no official meaning stored, decorate the close grouper\n     with a question mark.  The hover message should show the canonical\n     form of the computed meaning, and mention that there is no official\n     meaning against which to compare it.\n\n\nIf there is an official meaning and it matches the computed one,\n     decorate the close grouper with a green check (as in validation)\n     and the tooltip can report the one (correct) meaning in canonical\n     form.\n\n\nIf there is an official meaning and it differs from the computed\n     one, decorate the close grouper with a red X (as in validation) and\n     the tooltip can report the two meanings in canonical forms.\n\n\nThe second takes an official meaning as input, writes it to the\n  official meaning attribute of the expression, then calls the first\n  function to update validation.\n\n\nThe third takes a parser and applies it to the text content of the\n  expression, then writes it to the computed meaning attribute of the\n  expression, then calls the first function to update validation.\n\n\n\n\n\n\nUpdate the loop that re-parses all test-type groups to use this new\n   function to store computed meanings in test expressions, so that their\n   visual validation results are also updated.\n\n\nWhenever any expression with type test set to true changes, do the same\n   loop, but the only test that should be recomputed is the one that\n   changed.\n\n\nAdd a context menu item in expressions that have \"test\" set to true; it\n   should allow you to mark a test as currently passing.  This takes the\n   currently parsed meaning of that group and stores it as the official\n   meaning.  This should trigger a change event in the group, and thus\n   update its visual appearance.\n\n\nAdd another context menu item for clearing out the offical meaning.\n\n\n\n\nGoogle Drive support\n\n\nGoogle Drive also provides a very nice \nreal time collaboration API\n that makes any\ndocument you like into a Google-Docs-like collaborative model where changes\nare auto-synced across collaborators.  This was an idea that Dana Ernst\nasked for long ago when he first heard about the webLurch project. Integrate\nthat into webLurch, imitating the UX Ken describes from typical online\ncollaboration apps such as Google Docs and Overleaf, as follows.\n\n\n\n\nCreate a function that can update the UI when users log into or out of\n   Google Drive.  At first, it will just hide/show the File \n Save and\n   File \n Save as... actions on the menu and toolbars.\n\n\nAdd an HTML element to the toolbar in which we can place text about the\n   document's dirty state, and controls for enabling cloud storage.\n\n\nPlace a button in that element that says \"Enable cloud storage\" and make\n   the button visible iff the user has not authenticated to Google Drive.\n   Implement the click handler later, as described below.\n\n\nCreate a function that can specify any message to appear to the left of\n   that button (whether the button is visible or not).\n\n\nFor now, whenever a new document is created, call that function with a\n   warning message saying \"Not saved\".\n\n\nProvide a section in the File \n Application settings... dialog that will\n   be for Google Drive authentication.  You will add the Google login\n   functionality there later, as well as explanatory text about how cloud\n   saving works.\n\n\nImplement the click handler for the \"Enable cloud storage\" button to open\n   the application settings dialog and scroll to the Google Drive section.\n\n\nAdd to the application settings section about Google Drive the actual\n   login/auth button.  Once a user has logged in, the button becomes a\n   disconnect-from-my-Drive button (de-auth).  See the tutorial on how to\n   do so \nhere\n,\n   and especially the JavaScript tools they've developed for your use\n   \nhere\n.\n\n\nAdd a handler function for when a user enables or disables cloud storage.\n   At first, the only result will be the hiding/showing of the \"Enable Cloud\n   Storage\" button.\n\n\nExtend the Google login/out handler so that logging in moves the current\n   file into Google Drive as a new document.  Attempt to preserve document\n   title, if one was set in document properties.  If Drive requires unique\n   titles, you may need to append a number.\n\n\nWhen the file is moved into Drive, update the toolbar message to say\n   \"Saved to Drive.\"\n\n\nExtend File \n New so that, if the user is already logged into Drive, the\n   new file is placed into Drive, with its default \"Untitled\" title.  Also\n   change the toolbar message to \"Saved to Drive.\"\n\n\nWhen the user makes changes to their document, queue up a syncing event\n   for maybe 2 seconds in the future; if one was already queued, cancel it.\n   Immediately change the toolbar message to \"Syncing...\"\n\n\nWhen the syncing event fires, save the file to Google Drive, then change\n   the toolbar message to \"Saved to Drive\" again.\n\n\nExtend File \n Open so that, if the user is logged into Google Drive, it\n   replaces its old functionality with a dialog that lists all Lurch files\n   in the Drive, as a flat list sorted by most recently used.  Picking one\n   opens the file.\n\n\nCreate a new action, File \n Open my Google Drive, that does just that, in\n   another tab.  This will be used for file management.  We need to create\n   no UI for it; Google has done so.\n\n\nExtend the function that can update the UI when users log into or out of\n   Google Drive as follows:  Have File \n Open my Google Drive hidden by\n   default, but shown when you log into Drive.  Hide it again if you log\n   out.\n\n\nWe want Google Drive logins in one browser tab containing the Lurch app\n   to impact any other browser tabs containing the Lurch app.  So have the\n   app check the application settings every second or two, and if it sees\n   that the user has changed their Google Drive settings (stored in Local\n   Storage, due to the user's logging into Drive in another tab of the app),\n   then re-run the silent Google login attempt routine to complete the login\n   in the new tab as well.  (At least, this seems like it would work.\n   Investigate.)\n\n\nAdd to the application settings dialog, in the Google Drive\n   authentication section, a description of how cloud storage works.\n\n\n\n\nOffline support\n\n\nTo make an HTML5 app available offline, I believe the appropriate step is\nsimply to provide an app manifest.  I'm verifying that with \nthis\nStackOverflow\nquestion\n.\nThat question links to a tutorial on app manifests, if the answer turns out\nto be \"yes\" to that question.\n\n\nIdeas from various sources\n\n\nParsing speed improvements\n\n\nIf parsing with the current package becomes a performance bottleneck,\nnote that there are several improvements available, some already implemented\nin JavaScript.  See\n\nhere\n.\n\n\nAll images consistently base64\n\n\nThis GitHub comment\n\nmight be useful for ensuring that even images pasted into a document get\nconverted to base64, as all the other images in the document are.\n\n\nLMS integration\n\n\nSuggestion from Dana Ernst: Perhaps this is not necessary or feasible, but\nif you go with a web app, could you make it easy for teachers to \"plug into\"\nthe common LMS's (e.g. Blackboard, Canvas, etc.)?  I'm envisioning students\nbeing able to submit assignments with ease to an LMS and then teachers can\ngrade and enter grades easily without have to go back and forth between web\npages.\n\n\nFurther wiki integration?\n\n\nIs it possible for the entire Lurch app to exist inside MediaWiki, so that\nediting a wiki page was done using Lurch as the editor?  That would be\nexcellent for many use cases.  Certainly, we can use the editor in an iframe\nbut the question is about integrating with (replacing) MediaWiki's existing\nediting features.  You would still want to keep the normal full-page app\navailable for those who don't want the trappings of the wiki.  But it would\nbe very intuitive, because people are familiar with wikis, and can begin as\nreaders, then move up to being writers.\n\n\nDesktop app\n\n\nConvert webLurch into a desktop app using\n\nelectron\n.\nThis gives the user an app that always works offline, has an icon in their\nApplications folder/Start menu, etc., and feels like an official app that\nthey can alt-tab to, etc., but it\u2019s the exact same web app, just wrapped in\na thin desktop-app shell.  You can then add features to that as time\npermits.\n\n\n\n\nWhen the user clicks \"save,\" you can have the web app first query to see\n   if it\u2019s sitting in a desktop-app wrapper, and if so, don\u2019t save to\n   webstorage, but pop up the usual save box.\n\n\nSame for File \n Open.\n\n\nSame for accessing the system clipboard\nSimilar apps could be created for iOS, Android, etc., but would need to use\ntools other than Electron.  These are orthogonal tasks, and need not all be\ndone by the same developer.\n\n\n\n\nImproving documentation\n\n\nDocumentation at the top of most unit test spec files is incomplete. Add\ndocumentation so that someone who does not know how to read a test spec file\ncould learn it from that documentation.  Probably the best way to do this is\nto add general documentation to the simplest/main test spec, and then\nreference that general documentation from all other test specs.\n\n\nWhen you come to release the website for Lurch 1.0, built on the Lurch Web\nPlatform, make Lurch citeable as research software, using\n\nthis advice\n.  Then advertise on\nthe Lurch website how to cite it, and use that citation in your own papers\nabout Lurch as well.  It may also be appropriate to consider publishing\nabout Lurch in \nthis journal\n.", 
            "title": "Project plan"
        }, 
        {
            "location": "/plan/#project-plan", 
            "text": "This document aims to be a complete plan for what needs to be done on this\nproject, readable by developers.  It can therefore be viewed as a to-do list\nin chronological order, the first items being those that should be done\nnext, and the later items those that must come after.  Necessarily, the\nlater items are more vague than the earlier ones.  Note also that there are some  known bugs and planned enhancements  not listed in this file, because they are not part\nof the linear progression of the project.  They can be addressed whenever it\nbecomes convenient or useful; this document lists things in a more-or-less\nrequired order of completion.", 
            "title": "Project Plan"
        }, 
        {
            "location": "/plan/#json-editor-demo-app", 
            "text": "This is low priority, but another demo app you could create would be a JSON\neditor.  It would be a lot like the OMCD editor, except produce JSON instead\nof XML.  It would also have multiple types of atomic data, and use\nconnections for key-value pairs in mappings.", 
            "title": "JSON editor demo app"
        }, 
        {
            "location": "/plan/#enabling-and-disabling-features", 
            "text": "Implement the following system satisfying the following requirements, for\nallowing users to enable/disable certain app features on a per-document\nbasis.  The first optional feature is pattern-based rules, so this is not\nnecessary to implement until then.   The app register a list of features (probably a short phrase naming each,\n   plus a one-to-two-sentence description of it, plus a default value for\n   enabled/disabled).  The app can then query, at any time, the enabled/disabled status of any\n   feature in the currently open document.  At first, such a function should\n   just return the default value.  The document settings dialog will then have a section for application\n   features, with checkboxes for enabling/disabling all registered features.\n   Such changes will be written to document metadata.  Then you can upgrade the enable/disable query function to check the\n   document metadata first, and return the default value only if there is no\n   information in the document metadata about the feature.  Look through the OverLeaf specification for places where various features\n   are mentioned as optional, and if any are currently implemented in the\n   app, add code that ignores/disables them in any document for which the\n   query function returns \"disabled\" for that feature.  Ensure that there is an event that fires when document settings are\n   changed; if there is not one, create one.  At any point where a change in settings will require some kind of\n   re-processing (e.g., the list of supported validation features was\n   changed) be sure that a handler for the event exists and works.", 
            "title": "Enabling and disabling features"
        }, 
        {
            "location": "/plan/#parsing-test", 
            "text": "Rewrite the following section to more accurately reflect Section 24 of the\nspecification, then implement it as a module attached to the main Lurch\napplication, a module that can easily be disabled if we need to redesign it.   Add two new attribute types to the context menu for attribute expressions\n   in the document: \"notation,\" \"type,\" and \"meaning.\"  Add a new validation category for anything that has a \"notation\",\n   \"meaning,\" or \"type\" arrow going in or out.  Call it notation validation.  Start notation validation by verifying that the expression being\n   validated fits all of the following criteria.  If it does not, mark it\n   invalid.  If you output type arrows, you output no other kind of arrows.\n  Reason: A type cannot also be a notation or meaning.  If you output type arrows, you take no arrows in.\n  Reason: A type cannot be assigned any notation, type, or meaning.  If you output a notation arrow, you output at most one.\n  Reason: We currently require notation to be in exactly one category.  If you output a meaning arrow, you output at most one.\n  Reason: Notation must be unambiguous.  If you output a meaning, you do not take in a type.\n  Reason: Only patterns can have meaning, and thus they are non-atomic\n  expressions.  Types are only for atomic expressions.  If you take in a meaning, you take in no notation arrows.\n  Reason: Meanings cannot also be notational categories.  If you take in a meaning, you take in no type arrows.\n  Reason: Meanings are not notations, and thus can't have notational\n  types.  If you take in a notation, you take in no type arrows.\n  Reason: Notational categories aren't expressions, to be assigned\n  types.  If you take in a type, you take in no other kind of arrows.\n  Reason: This means you're the notation for an atomic type, and cannot\n  be assigned a meaning, nor treated as a notational category.  If you take in a meaning, you output no arrows.\n  Reason: Meanings are supposed to stand alone, not be a piece of\n  something else.  If you take in a notation, you output no type arrow.\n  Reason: Notational categories can't also be types.  If you take in a type arrow, you output neither type nor meaning\n  arrows.\n  Reason: Only atomic notations have types, and they canont be types or\n  meanings.    Create a function that computes, for any given expression, whether it is\n   the \"core\" of a notation definition.  For a non-pattern, this is the\n   target of the type arrow.  For a pattern, this is the source of the\n   meaning arrow.  Extend that function to return false if any expression in the connected\n   component of the attribution graph is not valid.  Create a function that, for cores of notation definitions, computes a\n   JSON representation of how to modify a parser with that new rule.  Here's\n   how:  For a structure of the form  [A] --notation--[B] --type--[C] :  If C is \"built-in\" then try to read B as integer/real/letter/etc.,\n  and use a built-in regular expression to create an atomic parsing\n  rule in category A.  If C is \"regular expression\" or \"regexp\" or \"re\" then create an\n  atomic parsing rule using B's content as a regular expression in\n  category A.  If C is \"symbol\" then create an atomic parsing rule using B as\n  static (not a regular expression) in category A.    For a structure of the form  [A] --notation--[B] :\n   Create the parsing rule that B is a subcategory of A.  For a structure of the form  [A] --notation--[B]  with n other\n   structures of the form  [A1]--type-- [variables]-- [B] , and\n   optionally a connection  [B]--meaning-- [M] :\n   Create, in category A, a grammar rule that follows the pattern in B,\n   but with each variable replaced by its type (some Ai).  As the\n   head of the OpenMath expression that will be generated, use the\n    OM.encodeAsIdentifier  version of the first label on the definition\n   core.  If there is no label, encode the definition itself (with the\n   types, not the variable names).\n   Also record in the same JSON data all labels of the core, and the\n   complete form of the meaning.  That complete form will include the\n   notational definition as an attribute, which should be removed.    Create a function that applies any such JSON record of a command to a\n   parser object, thus modifying that parser appropriately.  Extend the  contentsChanged  handler for expressions so that, if they are\n   part of a notation/type/meaning component in the attribution graph, find\n   their core and call this function on it, saving the result internally,\n   much like validation does.  Whenever any such parsing JSON data is recomputed and stored, loop\n   through all later expressions in the document, doing the following.  Before the loop, create an empty parser P.  Upon encountering an expression containing notation JSON data, apply to\n     it the function that extends P with that data.  Upon encountering an expression with attribute test set to true, run P\n     on its contents and store the resulting structure as a group attribute\n     in the expression.  (If the expression doesn't parse, this may be\n     null.)  Create three functions for storing meanings in parsing test expressions:  The first reads two attributes, one storing the computed meaning and\n  one storing the official meaning (which, for now, no expression yet\n  has, but that's coming soon).  It then writes into the expression the\n  following data.  If there is no official meaning stored, decorate the close grouper\n     with a question mark.  The hover message should show the canonical\n     form of the computed meaning, and mention that there is no official\n     meaning against which to compare it.  If there is an official meaning and it matches the computed one,\n     decorate the close grouper with a green check (as in validation)\n     and the tooltip can report the one (correct) meaning in canonical\n     form.  If there is an official meaning and it differs from the computed\n     one, decorate the close grouper with a red X (as in validation) and\n     the tooltip can report the two meanings in canonical forms.  The second takes an official meaning as input, writes it to the\n  official meaning attribute of the expression, then calls the first\n  function to update validation.  The third takes a parser and applies it to the text content of the\n  expression, then writes it to the computed meaning attribute of the\n  expression, then calls the first function to update validation.    Update the loop that re-parses all test-type groups to use this new\n   function to store computed meanings in test expressions, so that their\n   visual validation results are also updated.  Whenever any expression with type test set to true changes, do the same\n   loop, but the only test that should be recomputed is the one that\n   changed.  Add a context menu item in expressions that have \"test\" set to true; it\n   should allow you to mark a test as currently passing.  This takes the\n   currently parsed meaning of that group and stores it as the official\n   meaning.  This should trigger a change event in the group, and thus\n   update its visual appearance.  Add another context menu item for clearing out the offical meaning.", 
            "title": "Parsing test"
        }, 
        {
            "location": "/plan/#google-drive-support", 
            "text": "Google Drive also provides a very nice  real time collaboration API  that makes any\ndocument you like into a Google-Docs-like collaborative model where changes\nare auto-synced across collaborators.  This was an idea that Dana Ernst\nasked for long ago when he first heard about the webLurch project. Integrate\nthat into webLurch, imitating the UX Ken describes from typical online\ncollaboration apps such as Google Docs and Overleaf, as follows.   Create a function that can update the UI when users log into or out of\n   Google Drive.  At first, it will just hide/show the File   Save and\n   File   Save as... actions on the menu and toolbars.  Add an HTML element to the toolbar in which we can place text about the\n   document's dirty state, and controls for enabling cloud storage.  Place a button in that element that says \"Enable cloud storage\" and make\n   the button visible iff the user has not authenticated to Google Drive.\n   Implement the click handler later, as described below.  Create a function that can specify any message to appear to the left of\n   that button (whether the button is visible or not).  For now, whenever a new document is created, call that function with a\n   warning message saying \"Not saved\".  Provide a section in the File   Application settings... dialog that will\n   be for Google Drive authentication.  You will add the Google login\n   functionality there later, as well as explanatory text about how cloud\n   saving works.  Implement the click handler for the \"Enable cloud storage\" button to open\n   the application settings dialog and scroll to the Google Drive section.  Add to the application settings section about Google Drive the actual\n   login/auth button.  Once a user has logged in, the button becomes a\n   disconnect-from-my-Drive button (de-auth).  See the tutorial on how to\n   do so  here ,\n   and especially the JavaScript tools they've developed for your use\n    here .  Add a handler function for when a user enables or disables cloud storage.\n   At first, the only result will be the hiding/showing of the \"Enable Cloud\n   Storage\" button.  Extend the Google login/out handler so that logging in moves the current\n   file into Google Drive as a new document.  Attempt to preserve document\n   title, if one was set in document properties.  If Drive requires unique\n   titles, you may need to append a number.  When the file is moved into Drive, update the toolbar message to say\n   \"Saved to Drive.\"  Extend File   New so that, if the user is already logged into Drive, the\n   new file is placed into Drive, with its default \"Untitled\" title.  Also\n   change the toolbar message to \"Saved to Drive.\"  When the user makes changes to their document, queue up a syncing event\n   for maybe 2 seconds in the future; if one was already queued, cancel it.\n   Immediately change the toolbar message to \"Syncing...\"  When the syncing event fires, save the file to Google Drive, then change\n   the toolbar message to \"Saved to Drive\" again.  Extend File   Open so that, if the user is logged into Google Drive, it\n   replaces its old functionality with a dialog that lists all Lurch files\n   in the Drive, as a flat list sorted by most recently used.  Picking one\n   opens the file.  Create a new action, File   Open my Google Drive, that does just that, in\n   another tab.  This will be used for file management.  We need to create\n   no UI for it; Google has done so.  Extend the function that can update the UI when users log into or out of\n   Google Drive as follows:  Have File   Open my Google Drive hidden by\n   default, but shown when you log into Drive.  Hide it again if you log\n   out.  We want Google Drive logins in one browser tab containing the Lurch app\n   to impact any other browser tabs containing the Lurch app.  So have the\n   app check the application settings every second or two, and if it sees\n   that the user has changed their Google Drive settings (stored in Local\n   Storage, due to the user's logging into Drive in another tab of the app),\n   then re-run the silent Google login attempt routine to complete the login\n   in the new tab as well.  (At least, this seems like it would work.\n   Investigate.)  Add to the application settings dialog, in the Google Drive\n   authentication section, a description of how cloud storage works.", 
            "title": "Google Drive support"
        }, 
        {
            "location": "/plan/#offline-support", 
            "text": "To make an HTML5 app available offline, I believe the appropriate step is\nsimply to provide an app manifest.  I'm verifying that with  this\nStackOverflow\nquestion .\nThat question links to a tutorial on app manifests, if the answer turns out\nto be \"yes\" to that question.", 
            "title": "Offline support"
        }, 
        {
            "location": "/plan/#ideas-from-various-sources", 
            "text": "", 
            "title": "Ideas from various sources"
        }, 
        {
            "location": "/plan/#parsing-speed-improvements", 
            "text": "If parsing with the current package becomes a performance bottleneck,\nnote that there are several improvements available, some already implemented\nin JavaScript.  See here .", 
            "title": "Parsing speed improvements"
        }, 
        {
            "location": "/plan/#all-images-consistently-base64", 
            "text": "This GitHub comment \nmight be useful for ensuring that even images pasted into a document get\nconverted to base64, as all the other images in the document are.", 
            "title": "All images consistently base64"
        }, 
        {
            "location": "/plan/#lms-integration", 
            "text": "Suggestion from Dana Ernst: Perhaps this is not necessary or feasible, but\nif you go with a web app, could you make it easy for teachers to \"plug into\"\nthe common LMS's (e.g. Blackboard, Canvas, etc.)?  I'm envisioning students\nbeing able to submit assignments with ease to an LMS and then teachers can\ngrade and enter grades easily without have to go back and forth between web\npages.", 
            "title": "LMS integration"
        }, 
        {
            "location": "/plan/#further-wiki-integration", 
            "text": "Is it possible for the entire Lurch app to exist inside MediaWiki, so that\nediting a wiki page was done using Lurch as the editor?  That would be\nexcellent for many use cases.  Certainly, we can use the editor in an iframe\nbut the question is about integrating with (replacing) MediaWiki's existing\nediting features.  You would still want to keep the normal full-page app\navailable for those who don't want the trappings of the wiki.  But it would\nbe very intuitive, because people are familiar with wikis, and can begin as\nreaders, then move up to being writers.", 
            "title": "Further wiki integration?"
        }, 
        {
            "location": "/plan/#desktop-app", 
            "text": "Convert webLurch into a desktop app using electron .\nThis gives the user an app that always works offline, has an icon in their\nApplications folder/Start menu, etc., and feels like an official app that\nthey can alt-tab to, etc., but it\u2019s the exact same web app, just wrapped in\na thin desktop-app shell.  You can then add features to that as time\npermits.   When the user clicks \"save,\" you can have the web app first query to see\n   if it\u2019s sitting in a desktop-app wrapper, and if so, don\u2019t save to\n   webstorage, but pop up the usual save box.  Same for File   Open.  Same for accessing the system clipboard\nSimilar apps could be created for iOS, Android, etc., but would need to use\ntools other than Electron.  These are orthogonal tasks, and need not all be\ndone by the same developer.", 
            "title": "Desktop app"
        }, 
        {
            "location": "/plan/#improving-documentation", 
            "text": "Documentation at the top of most unit test spec files is incomplete. Add\ndocumentation so that someone who does not know how to read a test spec file\ncould learn it from that documentation.  Probably the best way to do this is\nto add general documentation to the simplest/main test spec, and then\nreference that general documentation from all other test specs.  When you come to release the website for Lurch 1.0, built on the Lurch Web\nPlatform, make Lurch citeable as research software, using this advice .  Then advertise on\nthe Lurch website how to cite it, and use that citation in your own papers\nabout Lurch as well.  It may also be appropriate to consider publishing\nabout Lurch in  this journal .", 
            "title": "Improving documentation"
        }, 
        {
            "location": "/bugs-and-enhancements/", 
            "text": "Bug fixes and Enhancements\n\n\nThis document lists known bugs that we plan to fix and planned enhancements\nnot yet made.  They are listed in this file, rather than in \nthe Project\nPlan\n because these are things that are not part of the linear\nprogression of the project, in the sense that further work can be done on\nthe main project plan without these bug fixes or enhancements.\n\n\nBug fixes\n\n\nOverall\n\n\n\n\nArrows representing connections between groups don't look good sometimes.\n   Improve the heuristics for drawing them as follows.\n\n\nThe default path is (a) up from the source until it reaches a distance\n  of h above the target's top (for some fixed constant h), (b) turn\n  NE/NW toward the target with radius r, (c) horizontally toward the\n  target, (d) turn SE/SW toward the target with radius r, then (e) down\n  to the target with an arrowhead.\n\n\nOne problem with that strategy is that if there is little or no\n  horizontal separation, then it is (close to) just one vertical line.\n  So if the horizontal separation is under 2r, make the following\n  change.  The end of the curve can still be a turn SW of radius r,\n  followed by a step down with an arrowhead.  But from the source until\n  that point should be a single B\u00e9zier curve that begins with velocity N\n  and ends with velocity W.\n\n\nThe other problem with the strategy is if there are many targets in\n  the same row of text, then the lines on the way to those targets will\n  all overlap, and thus become indistinguishable.  To solve this, let h\n  be a function equal to $C + 0.03\\Delta x$, where $C$ is some constant\n  and $\\Delta x$ is the horizontal distance between source and target\n  bubbles.  The $0.03$ is an estimate that can be customized with\n  testing.\n\n\n\n\n\n\n\n\nLoad and save\n\n\n\n\nNot all edits cause the document to be marked dirty.  TinyMCE events are\n   not firing correctly.  \nMinimal working example created.\n\n   \nOr see this related issue.\n\n   Use the responses from that to get this\n   problem fixed in Lurch, either by updating to a fixed version of TinyMCE\n   or by installing a workaround here.  Although you've heard about the\n   KeyUp and SetContent events that you're using in the Groups package, so\n   you may be able to correct this problem partially with those events.\n   (Verified on 9/22/16 that these bugs are still unresolved.)\n   The bug just mentioned has since been closed, and suggests that it may\n   have been fixed in TinyMCE 4.x; check to see.\n\n\n\n\nEnhancements\n\n\nMathQuill parsing\n\n\n\n\nBefore doing any MathQuill updates, import MathQuill 0.10, which has big\n   breaking API changes, and update all Lurch MathQuill calls to use the new\n   API.  \nSee here for migration\n   notes.\n\n   Because that is a major change to many parts of Lurch, test thoroughly,\n   including parsing MathQuill content.\n\n\nSupport adjacent atomics as factors in a product\n\n\nSupport chained equations\n\n\nAdd tests for things that should \nnot\n parse, and verify that they do not\n\n\n\n\nDependencies\n\n\n\n\nRight now circular dependency relationships never cause an infinite loop\n   because dependency content is only embedded when a document is opened.\n   So if A depends on B which depends on A, then when A is opened, it will\n   embed B, which indirectly embeds the saved version of A.  If A is saved\n   and B is opened, that will embed the (new, larger) A, and this can\n   continue to increase file sizes as we repeatedly open documents.  But\n   each step of this infinite expansion requires a user action, so the\n   application will never hang.  However, it can be a silent and highly\n   undesirable file inflater.  Expand the dependency loading mechanism to\n   check for a loop by finding the same filename or wiki URL nested within\n   itself in the dependency data of a document, and alert the user.\n\n\nExtend the \"Add URL dependency\" event handler with a \"please wait\"\n   indicator while the document is being fetched.  Use the \nwaiting\n method\n   in the \nDialogs\n plugin.\n\n\nThere is not yet support for adding dependencies from files in your\n   Dropbox.  Add this feature.\n\n\n\n\nCheat sheets\n\n\nThe \"Cheatsheets\" menu item of the RStudio GUI is an excellent resource for\nmany users.  It contains links to online PDFs of one- or two-sided\nprintable, dense reference sheets for common topics in RStudio.  A similar\ncheatsheet (or set thereof) could be created about Lurch.  Consider these\ntopics.\n\n\n\n\nThe advanced users guide, condensed into a two-sided reference\n\n\nUnderstanding and dealing with validation messages\n\n\nA reference for each of the built-in libraries\n\n\n\n\nGroups Plugin\n\n\n\n\nMake a menu item for hiding/showing group decorations.\n\n\nThe \nGroup.set\n function no longer takes any action if the new value is\n   the same as the old value.  (Similarly, \nclear\n doesn't do anything if\n   the attribute is already gone.)  This prevents clients from needing to\n   implement their own checks to prevent infinite loops of change event\n   handlers.  The remaining task is to go through the demo apps and find\n   their workarounds for this annoyance and remove them to clean up those\n   apps (and not confuse readers).  Then verify that the apps still work,\n   i.e., that there truly are no infinite loops remaining.\n\n\nSeveral new methods have been added to the Groups Plugin without unit\n   tests being written for them.  Be sure to look back through the full list\n   of functions in that file and find those which have no unit tests, and\n   create unit tests for them, debugging the functions as you do so.\n\n\nThe following new members will be needed in the Group class as we create\n   more complex webLurch-based applications\n\n\nsaveCursorPosition()\n, which returns a bookmark\n\n\nrestoreCursorPosition()\n, which returns to a bookmark you provide\n\n\nallContents()\n, which returns an array of alternating strings and\n     groups\n\n\n\n\nUI for Connections Between Groups\n\n\n\n\nAdd a keyboard shortcut for entering connection mode (that is, clicking\n   the connection button on the toolbar).  This should be in the groups\n   plugin.\n\n\nAdd a keyboard shortcut for cycling through the built-in keys an\n   attribute expression can have.  This should be in the main Lurch app.\n\n\nAdd an option that when entering arrow-creation mode, ALL bubble outlines\n   in the document are faintly drawn (not their tags), so that it's\n   completely clear where a user wants to aim the mouse to hit a certain\n   bubble.\n\n\nAdd an option that show-groupers (Ctrl/Cmd+1) mode is automatically\n   enabled when the user enters arrow-connection mode, and re-disabled (if\n   it was disabled in the first place) when exiting arrow-connection mode.\n   This is like the previous feature, but more aggressive and techy.  (Do we\n   still need it now that we have the previous feature?)\n\n\nOn mobile, a tap highlights the innermost bubble under it, without\n   creating the arrow yet, and shows OK/cancel buttons hovering nearby.  If\n   the user tapped what he/she expected to tap, then he/she hits OK and it\n   creates the arrow.  Cancel (or just tapping elsewhere) closes the\n   OK/cancel buttons and does nothing else.\n\n\nWhen in arrow-creation mode, keystrokes are interpreted as typing bubble\n   labels, which will scroll the view to the bubbles with those labels, and\n   highlight them as if the user had mouse-hovered them.  If the user\n   presses enter, the arrow will be created.  Hence there are\n   keyboard-shortcut ways to specify arrows among bubbles.  This would work\n   best with a keyboard shortcut for entering bubble-making mode also.  (If\n   there are ambiguous labels--i.e., ones that apply to more than one\n   bubble--just choose any one; that's the user's fault.)  Note that this\n   requires two additional features to help it out:\n\n\nA function in the group type for computing the default label for any\n     bubble in the document.  The default can be the address of the bubble\n     in the hierarchy, as a list of positive integers; e.g., the second\n     bubble immediate inside the tenth topmost bubble has number 10.2.\n\n\nDrawing bubbles in arrow-creation mode should include these labels\n     somewhere nearby.\n\n\n\n\nMiscellaneous\n\n\n\n\nSee \nthis answer\n to your\n   StackOverflow question about higher resolution HTML canvas rendering on\n   retina deisplays.  See if its suggestions can work in your case.  This\n   may be the same as the following one...\n\n\nBubble tags are not drawn at retina resolution on Macs with retina\n   displays.  \nSee my question about how to fix this problem here.\n\n\nComplete \nthe unit test for the DOM Utils\n   package\n.  See the end of that file for\n   the few missing tests.\n\n\nIf you ever need to export PDFs of Lurch documents, consider\n   \njsPDF\n.", 
            "title": "Bug fix/enhancement list"
        }, 
        {
            "location": "/bugs-and-enhancements/#bug-fixes-and-enhancements", 
            "text": "This document lists known bugs that we plan to fix and planned enhancements\nnot yet made.  They are listed in this file, rather than in  the Project\nPlan  because these are things that are not part of the linear\nprogression of the project, in the sense that further work can be done on\nthe main project plan without these bug fixes or enhancements.", 
            "title": "Bug fixes and Enhancements"
        }, 
        {
            "location": "/bugs-and-enhancements/#bug-fixes", 
            "text": "", 
            "title": "Bug fixes"
        }, 
        {
            "location": "/bugs-and-enhancements/#overall", 
            "text": "Arrows representing connections between groups don't look good sometimes.\n   Improve the heuristics for drawing them as follows.  The default path is (a) up from the source until it reaches a distance\n  of h above the target's top (for some fixed constant h), (b) turn\n  NE/NW toward the target with radius r, (c) horizontally toward the\n  target, (d) turn SE/SW toward the target with radius r, then (e) down\n  to the target with an arrowhead.  One problem with that strategy is that if there is little or no\n  horizontal separation, then it is (close to) just one vertical line.\n  So if the horizontal separation is under 2r, make the following\n  change.  The end of the curve can still be a turn SW of radius r,\n  followed by a step down with an arrowhead.  But from the source until\n  that point should be a single B\u00e9zier curve that begins with velocity N\n  and ends with velocity W.  The other problem with the strategy is if there are many targets in\n  the same row of text, then the lines on the way to those targets will\n  all overlap, and thus become indistinguishable.  To solve this, let h\n  be a function equal to $C + 0.03\\Delta x$, where $C$ is some constant\n  and $\\Delta x$ is the horizontal distance between source and target\n  bubbles.  The $0.03$ is an estimate that can be customized with\n  testing.", 
            "title": "Overall"
        }, 
        {
            "location": "/bugs-and-enhancements/#load-and-save", 
            "text": "Not all edits cause the document to be marked dirty.  TinyMCE events are\n   not firing correctly.   Minimal working example created. \n    Or see this related issue. \n   Use the responses from that to get this\n   problem fixed in Lurch, either by updating to a fixed version of TinyMCE\n   or by installing a workaround here.  Although you've heard about the\n   KeyUp and SetContent events that you're using in the Groups package, so\n   you may be able to correct this problem partially with those events.\n   (Verified on 9/22/16 that these bugs are still unresolved.)\n   The bug just mentioned has since been closed, and suggests that it may\n   have been fixed in TinyMCE 4.x; check to see.", 
            "title": "Load and save"
        }, 
        {
            "location": "/bugs-and-enhancements/#enhancements", 
            "text": "", 
            "title": "Enhancements"
        }, 
        {
            "location": "/bugs-and-enhancements/#mathquill-parsing", 
            "text": "Before doing any MathQuill updates, import MathQuill 0.10, which has big\n   breaking API changes, and update all Lurch MathQuill calls to use the new\n   API.   See here for migration\n   notes. \n   Because that is a major change to many parts of Lurch, test thoroughly,\n   including parsing MathQuill content.  Support adjacent atomics as factors in a product  Support chained equations  Add tests for things that should  not  parse, and verify that they do not", 
            "title": "MathQuill parsing"
        }, 
        {
            "location": "/bugs-and-enhancements/#dependencies", 
            "text": "Right now circular dependency relationships never cause an infinite loop\n   because dependency content is only embedded when a document is opened.\n   So if A depends on B which depends on A, then when A is opened, it will\n   embed B, which indirectly embeds the saved version of A.  If A is saved\n   and B is opened, that will embed the (new, larger) A, and this can\n   continue to increase file sizes as we repeatedly open documents.  But\n   each step of this infinite expansion requires a user action, so the\n   application will never hang.  However, it can be a silent and highly\n   undesirable file inflater.  Expand the dependency loading mechanism to\n   check for a loop by finding the same filename or wiki URL nested within\n   itself in the dependency data of a document, and alert the user.  Extend the \"Add URL dependency\" event handler with a \"please wait\"\n   indicator while the document is being fetched.  Use the  waiting  method\n   in the  Dialogs  plugin.  There is not yet support for adding dependencies from files in your\n   Dropbox.  Add this feature.", 
            "title": "Dependencies"
        }, 
        {
            "location": "/bugs-and-enhancements/#cheat-sheets", 
            "text": "The \"Cheatsheets\" menu item of the RStudio GUI is an excellent resource for\nmany users.  It contains links to online PDFs of one- or two-sided\nprintable, dense reference sheets for common topics in RStudio.  A similar\ncheatsheet (or set thereof) could be created about Lurch.  Consider these\ntopics.   The advanced users guide, condensed into a two-sided reference  Understanding and dealing with validation messages  A reference for each of the built-in libraries", 
            "title": "Cheat sheets"
        }, 
        {
            "location": "/bugs-and-enhancements/#groups-plugin", 
            "text": "Make a menu item for hiding/showing group decorations.  The  Group.set  function no longer takes any action if the new value is\n   the same as the old value.  (Similarly,  clear  doesn't do anything if\n   the attribute is already gone.)  This prevents clients from needing to\n   implement their own checks to prevent infinite loops of change event\n   handlers.  The remaining task is to go through the demo apps and find\n   their workarounds for this annoyance and remove them to clean up those\n   apps (and not confuse readers).  Then verify that the apps still work,\n   i.e., that there truly are no infinite loops remaining.  Several new methods have been added to the Groups Plugin without unit\n   tests being written for them.  Be sure to look back through the full list\n   of functions in that file and find those which have no unit tests, and\n   create unit tests for them, debugging the functions as you do so.  The following new members will be needed in the Group class as we create\n   more complex webLurch-based applications  saveCursorPosition() , which returns a bookmark  restoreCursorPosition() , which returns to a bookmark you provide  allContents() , which returns an array of alternating strings and\n     groups", 
            "title": "Groups Plugin"
        }, 
        {
            "location": "/bugs-and-enhancements/#ui-for-connections-between-groups", 
            "text": "Add a keyboard shortcut for entering connection mode (that is, clicking\n   the connection button on the toolbar).  This should be in the groups\n   plugin.  Add a keyboard shortcut for cycling through the built-in keys an\n   attribute expression can have.  This should be in the main Lurch app.  Add an option that when entering arrow-creation mode, ALL bubble outlines\n   in the document are faintly drawn (not their tags), so that it's\n   completely clear where a user wants to aim the mouse to hit a certain\n   bubble.  Add an option that show-groupers (Ctrl/Cmd+1) mode is automatically\n   enabled when the user enters arrow-connection mode, and re-disabled (if\n   it was disabled in the first place) when exiting arrow-connection mode.\n   This is like the previous feature, but more aggressive and techy.  (Do we\n   still need it now that we have the previous feature?)  On mobile, a tap highlights the innermost bubble under it, without\n   creating the arrow yet, and shows OK/cancel buttons hovering nearby.  If\n   the user tapped what he/she expected to tap, then he/she hits OK and it\n   creates the arrow.  Cancel (or just tapping elsewhere) closes the\n   OK/cancel buttons and does nothing else.  When in arrow-creation mode, keystrokes are interpreted as typing bubble\n   labels, which will scroll the view to the bubbles with those labels, and\n   highlight them as if the user had mouse-hovered them.  If the user\n   presses enter, the arrow will be created.  Hence there are\n   keyboard-shortcut ways to specify arrows among bubbles.  This would work\n   best with a keyboard shortcut for entering bubble-making mode also.  (If\n   there are ambiguous labels--i.e., ones that apply to more than one\n   bubble--just choose any one; that's the user's fault.)  Note that this\n   requires two additional features to help it out:  A function in the group type for computing the default label for any\n     bubble in the document.  The default can be the address of the bubble\n     in the hierarchy, as a list of positive integers; e.g., the second\n     bubble immediate inside the tenth topmost bubble has number 10.2.  Drawing bubbles in arrow-creation mode should include these labels\n     somewhere nearby.", 
            "title": "UI for Connections Between Groups"
        }, 
        {
            "location": "/bugs-and-enhancements/#miscellaneous", 
            "text": "See  this answer  to your\n   StackOverflow question about higher resolution HTML canvas rendering on\n   retina deisplays.  See if its suggestions can work in your case.  This\n   may be the same as the following one...  Bubble tags are not drawn at retina resolution on Macs with retina\n   displays.   See my question about how to fix this problem here.  Complete  the unit test for the DOM Utils\n   package .  See the end of that file for\n   the few missing tests.  If you ever need to export PDFs of Lurch documents, consider\n    jsPDF .", 
            "title": "Miscellaneous"
        }, 
        {
            "location": "/example-apps/", 
            "text": "Example Lurch Applications\n\n\nThe webLurch project is attempting to rewrite \nthe desktop application\nLurch\n for the web.  It is not yet complete, but\nthe foundational technology is progressing, and can be used in other\nprojects as well.  This page lists several example applications built using\nthe webLurch foundation.\n\n(See here for full developer info.)\n\n\nBeginner examples\n\n\nThese applications truly serve no purpose except to show very small example\napplictaions built on the \nLurch Web Platform.\n\n\nSimple example\n\n\nDevelopers who want to build their own apps on the webLurch platform should\nstart here, because it's highly documented and extremely simple.\n\n\n\n\nLaunch the app\n\n\nView source code\n\n\n\n\n\"Complex\" Example\n\n\n(Actually just a tiny step more complex than the simple example.)\n\n\nDevelopers who want to build their own apps on the webLurch platform should\nstart with the Simple Example, then move to this one.\n\n\nIt defines two group types rather than one, and shows how to\nadd context menus and do lengthy background computations,\namong other things.\n\n\n\n\nLaunch the app\n\n\nView source code\n\n\n\n\nIntermediate examples\n\n\nThese applications actually have some useful functionaly, however small.\nBe sure you've started with the\n\nbeginner examples above\n, first.\n\n\nMath Evaluator\n\n\nThis one lets users wrap any typeset mathematical expression in a bubble and\nask the app to evaluate it or show its internal structure.\n\n\n\n\nLaunch the app\n\n\nView source code\n\n\n\n\nOMCD Editor\n\n\nThis app that lets you write an \nOpenMath Content\nDictionary\n in a user-friendly word processor,\nthen export its raw XML for use elsewhere. This is a specific example of an\nentire category of apps for editing hierarchically structured meanings.\n\n\n\n\nLaunch the app\n\n\nView source code\n\n\n\n\nCode Editor\n\n\nThis app lets users insert boilerplate code from a simple programming\nlanguage (with only one kind of if and one kind of loop, and a few other\nstatements) using groups and text within them as comments.  Thus the user\n\"codes\" in their own native language, and the app translates it into one of\na few sample languages in a sidebar.  JavaScript code can then be executed\nif the user desires.\n\n\n\n\nLaunch the app\n\n\nView source code\n\n\n\n\nLean UI\n\n\nThis is the most complex demo; try one of the others to start.\n\n\nIt lets users interact with the theorem prover\n\nLean\n in a word-processing environment with\nnice visual feedback.\n\n\n\n\nLaunch the app\n\n\nRead the tutorial\n\n\nView source code\n\n\n\n\nMain App\n\n\nLurch\n\n\nThe ongoing implementation of Lurch for the web is kept here.  It is still\nin the beginning phases of development.  For software that will check the\nsteps of students' work, \nsee the desktop\nversion\n.\n\n\n\n\nNo live version yet, because it is being redesigned.\n\n\nThe most recent \nsource code is here", 
            "title": "Example apps"
        }, 
        {
            "location": "/example-apps/#example-lurch-applications", 
            "text": "The webLurch project is attempting to rewrite  the desktop application\nLurch  for the web.  It is not yet complete, but\nthe foundational technology is progressing, and can be used in other\nprojects as well.  This page lists several example applications built using\nthe webLurch foundation. (See here for full developer info.)", 
            "title": "Example Lurch Applications"
        }, 
        {
            "location": "/example-apps/#beginner-examples", 
            "text": "These applications truly serve no purpose except to show very small example\napplictaions built on the  Lurch Web Platform.", 
            "title": "Beginner examples"
        }, 
        {
            "location": "/example-apps/#simple-example", 
            "text": "Developers who want to build their own apps on the webLurch platform should\nstart here, because it's highly documented and extremely simple.   Launch the app  View source code", 
            "title": "Simple example"
        }, 
        {
            "location": "/example-apps/#complex-example", 
            "text": "(Actually just a tiny step more complex than the simple example.)  Developers who want to build their own apps on the webLurch platform should\nstart with the Simple Example, then move to this one.  It defines two group types rather than one, and shows how to\nadd context menus and do lengthy background computations,\namong other things.   Launch the app  View source code", 
            "title": "\"Complex\" Example"
        }, 
        {
            "location": "/example-apps/#intermediate-examples", 
            "text": "These applications actually have some useful functionaly, however small.\nBe sure you've started with the beginner examples above , first.", 
            "title": "Intermediate examples"
        }, 
        {
            "location": "/example-apps/#math-evaluator", 
            "text": "This one lets users wrap any typeset mathematical expression in a bubble and\nask the app to evaluate it or show its internal structure.   Launch the app  View source code", 
            "title": "Math Evaluator"
        }, 
        {
            "location": "/example-apps/#omcd-editor", 
            "text": "This app that lets you write an  OpenMath Content\nDictionary  in a user-friendly word processor,\nthen export its raw XML for use elsewhere. This is a specific example of an\nentire category of apps for editing hierarchically structured meanings.   Launch the app  View source code", 
            "title": "OMCD Editor"
        }, 
        {
            "location": "/example-apps/#code-editor", 
            "text": "This app lets users insert boilerplate code from a simple programming\nlanguage (with only one kind of if and one kind of loop, and a few other\nstatements) using groups and text within them as comments.  Thus the user\n\"codes\" in their own native language, and the app translates it into one of\na few sample languages in a sidebar.  JavaScript code can then be executed\nif the user desires.   Launch the app  View source code", 
            "title": "Code Editor"
        }, 
        {
            "location": "/example-apps/#lean-ui", 
            "text": "This is the most complex demo; try one of the others to start.  It lets users interact with the theorem prover Lean  in a word-processing environment with\nnice visual feedback.   Launch the app  Read the tutorial  View source code", 
            "title": "Lean UI"
        }, 
        {
            "location": "/example-apps/#main-app", 
            "text": "", 
            "title": "Main App"
        }, 
        {
            "location": "/example-apps/#lurch", 
            "text": "The ongoing implementation of Lurch for the web is kept here.  It is still\nin the beginning phases of development.  For software that will check the\nsteps of students' work,  see the desktop\nversion .   No live version yet, because it is being redesigned.  The most recent  source code is here", 
            "title": "Lurch"
        }
    ]
}